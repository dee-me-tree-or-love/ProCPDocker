service: dockerfhict 

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs6.10
  region: eu-central-1
  profile: school
  # stage: mock?

functions:

# simulation endpoint

  newSimulation:
    handler: API/mock/simulation/handler.newSimulation
    events:
     - http:
         path: simulation/new-simulation
         method: put
         cors: true
         
  getSimulation:
    handler: API/mock/simulation/handler.getSimulation
    events:
      - http:
          path: simulation/{simulation_id}
          method: get
          cors: true      

  getSimulationConfig:
    handler: API/mock/simulation/handler.getSimulationConfig
    events:
      - http:
          path: simulation/{simulation_id}/configuration
          method: get
          cors: true     

  getSimulationTimelines:
    handler: API/mock/simulation/handler.getSimulationTimelines
    events:
      - http:
          path: /simulation/{simulation_id}/timelines
          method: get
          cors: true           
  
  getSimulationHarborData:
    handler: API/mock/simulation/handler.getSimulationHarborData
    events:
      - http:
          path: /simulation/{simulation_id}/timelines/{timeline_id}/{option}/all
          method: get
          cors: true

# for some reason didn't  give an endpoint url
# sync endoint
# postman output: 
# {
#   "message": "Missing Authentication Token"
# }
# SOMETHING IS SUPER WRONG WITH THIS ONE

  syncStateTo:
    handler: API/mock/sync/handler.syncTo
    events:
      - http:
          path: /sync
          method: patch
          cors: true

# tasks endpoint

  getTasks:
    handler: API/mock/task/handler.getTasks
    events:
      - http:
          path: /tasks/{simulation_id}/{timeline_id}
          method: get
          cors: true
  





#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'

#    Define function environment variables here
#    environment:
#      variable2: value2

